package core

import (
	g "github.com/maragudk/gomponents" // Use canonical import path
	. "github.com/maragudk/gomponents/components"
	"github.com/maragudk/gomponents/html"
)

// --- Basic Elements with Tailwind ---

// Button renders a styled button.
func Button(text string, attrs ...g.Node) g.Node {
	return html.Button(
		// Example Tailwind classes - customize as needed
		Classes{ // Use Classes directly
			"py-2", "px-4", "bg-blue-500", "text-white", "font-semibold",
			"rounded-lg", "shadow-md", "hover:bg-blue-700", "focus:outline-none",
			"focus:ring-2", "focus:ring-blue-400", "focus:ring-opacity-75",
		},
		g.Text(text),
		g.Group(attrs), // g.Group is correct here as attrs is already a slice
	)
}

// Input renders a styled input field.
func Input(inputType, name, value string, attrs ...g.Node) g.Node {
	return html.Input(
		html.Type(inputType),
		html.Name(name),
		html.Value(value),
		// Example Tailwind classes
		Classes{ // Use Classes directly
			"mt-1", "block", "w-full", "rounded-md", "border-gray-300",
			"shadow-sm", "focus:border-indigo-300", "focus:ring",
			"focus:ring-indigo-200", "focus:ring-opacity-50",
		},
		g.Group(attrs), // g.Group is correct here as attrs is already a slice
	)
}

// TextArea renders a styled textarea.
func TextArea(name, value string, attrs ...g.Node) g.Node {
	return html.Textarea(
		html.Name(name),
		// Example Tailwind classes
		Classes{ // Use Classes directly
			"mt-1", "block", "w-full", "rounded-md", "border-gray-300",
			"shadow-sm", "focus:border-indigo-300", "focus:ring",
			"focus:ring-indigo-200", "focus:ring-opacity-50",
		},
		g.Group(attrs), // g.Group is correct here as attrs is already a slice
		g.Text(value), // Text content for textarea
	)
}

// Select renders a styled select dropdown.
func Select(name string, options map[string]string, selectedValue string, attrs ...g.Node) g.Node {
	opts := make([]g.Node, 0, len(options))
	for val, text := range options {
		opt := html.Option(html.Value(val), g.Text(text))
		if val == selectedValue {
			opt = g.Group(opt, html.Selected())
		}
		opts = append(opts, opt)
	}

	return html.Select(
		html.Name(name),
		// Example Tailwind classes
		Classes{ // Use Classes directly
			"mt-1", "block", "w-full", "rounded-md", "border-gray-300",
			"shadow-sm", "focus:border-indigo-300", "focus:ring",
			"focus:ring-indigo-200", "focus:ring-opacity-50",
		},
		g.Group(attrs), // g.Group is correct here as attrs is already a slice
		g.Group(opts),  // g.Group is correct here as opts is already a slice
	)
}

// --- Form Handling ---

// FormError renders error messages for a specific field from a core.Form instance.
// Returns nil if there's no error for the field.
func FormError(form *Form, field string) g.Node {
	if !form.HasError(field) {
		return nil
	}
	// Example Tailwind classes for error message
	return html.Span(Classes{"text-red-600", "text-sm", "mt-1"}, g.Text(form.GetError(field))) // Use Classes directly
}

// CSRFTokenInput renders a hidden input field for CSRF token protection.
// Assumes you have a way to get the current CSRF token.
func CSRFTokenInput(token string) g.Node {
	// The name "csrf_token" is common, adjust if your CSRF library expects differently.
	return html.Input(html.Type("hidden"), html.Name("csrf_token"), html.Value(token))
}

// FieldGroup combines a label, input/textarea/select, and error message.
func FieldGroup(label, fieldName string, inputElement g.Node, form *Form) g.Node {
	return html.Div(
		Classes{"mb-4"}, // Use Classes directly
		html.Label(
			html.For(fieldName),
			Classes{"block", "text-sm", "font-medium", "text-gray-700"}, // Use Classes directly
			g.Text(label),
		),
		inputElement,
		FormError(form, fieldName), // Display error if present
	)
}

// --- Page Structure ---

// Page component (can be used within Layout)
func Page(title string, children ...g.Node) g.Node {
	return html.Div(
		Classes{"container", "mx-auto", "p-4"}, // Use Classes directly
		html.H1(Classes{"text-2xl", "font-bold", "mb-4"}, g.Text(title)), // Use Classes directly
		g.Group(children), // g.Group is correct here as children is already a slice
	)
}

// --- Asset Handling ---

// StylesheetLink creates a <link> tag for a CSS stylesheet.
func StylesheetLink(href string) g.Node {
	return html.Link(html.Rel("stylesheet"), html.Href(href))
}

// ScriptLink creates a <script> tag for a JavaScript file.
// useDefer indicates if the 'defer' attribute should be added.
func ScriptLink(src string, async bool, useDefer bool) g.Node {
	attrs := []g.Node{html.Src(src)}
	if async {
		attrs = append(attrs, html.Async())
	}
	if useDefer {
		attrs = append(attrs, DeferAttr()) // Use renamed helper function
	}
	return html.Script(attrs...)
}

// --- Helper Components (from gomponents/components) ---

// DeferAttr returns a gomponents node that adds the defer attribute.
func DeferAttr() g.Node {
	return g.Attr("defer")
}
